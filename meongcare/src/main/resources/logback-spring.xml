<?xml version="1.0" encoding="UTF-8" ?>
<configuration>
    <springProperty name="SLACK_WEBHOOK_URI" source="logging.slack.webhook-uri"/>

    <!-- Console appender 설정 -->
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <springProfile name="local">
        <!-- local 프로파일일 때는 로그를 파일에 저장하지 않고, 콘솔에만 출력 -->
        <root level="INFO">
            <appender-ref ref="Console" />
        </root>
    </springProfile>

    <springProfile name="!local">
        <!-- local이 아닌 다른 프로파일일 때는 Slack과 Sentry에 로그 전송 -->
        <appender name="SLACK" class="com.github.maricn.logback.SlackAppender">
            <webhookUri>${SLACK_WEBHOOK_URI}</webhookUri>
            <layout class="ch.qos.logback.classic.PatternLayout">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %msg %n</pattern>
            </layout>
            <username>Log Bot</username>
            <iconEmoji>:anger:</iconEmoji>
            <colorCoding>true</colorCoding>
        </appender>

        <appender name="ASYNC_SLACK" class="ch.qos.logback.classic.AsyncAppender">
            <appender-ref ref="SLACK"/>
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>ERROR</level>
            </filter>
        </appender>

        <appender name="Sentry" class="io.sentry.logback.SentryAppender">
            <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                <level>ERROR</level>
            </filter>
            <!-- Optionally add an encoder -->
            <encoder>
                <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
            </encoder>
        </appender>

        <root level="INFO">
            <appender-ref ref="Console" />
            <appender-ref ref="ASYNC_SLACK"/>
        </root>
    </springProfile>
</configuration>
