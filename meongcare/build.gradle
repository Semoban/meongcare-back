buildscript {
	ext {
		queryDslVersion = "5.0.0"
	}
}
plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.17'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

group = 'com'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '11'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-jdbc'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	//redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'

	// jwt token
	implementation('io.jsonwebtoken:jjwt-api:0.11.2')
	runtimeOnly('io.jsonwebtoken:jjwt-impl:0.11.2')
	runtimeOnly('io.jsonwebtoken:jjwt-jackson:0.11.2')

	// s3
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	//querydsl
	implementation "com.querydsl:querydsl-jpa:${queryDslVersion}"
	implementation "com.querydsl:querydsl-apt:${queryDslVersion}"

	//actuator
	implementation('org.springframework.boot:spring-boot-starter-actuator')

	//swagger
	implementation 'org.springdoc:springdoc-openapi-ui:1.6.9'

	//security
	implementation 'org.springframework.boot:spring-boot-starter-security'

	//firebase
	implementation 'com.google.firebase:firebase-admin:9.1.1'

	//sentry
	implementation 'io.sentry:sentry-spring-boot-starter:7.2.0'
	implementation 'io.sentry:sentry-logback:6.28.0'

	//logback
	implementation "com.github.maricn:logback-slack-appender:1.4.0"

	//jeasy
	testImplementation group: 'org.jeasy', name: 'easy-random-core', version: '5.0.0'
}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = "$buildDir/generated/querydsl"
querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
